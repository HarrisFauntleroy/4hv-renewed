generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @unique @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @unique @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @unique @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  accounts      Account[]
  forums        Forum[]
  subforums     Subforum[]
  threads       Thread[]
  comments      Comment[]
  sessions      Session[]
}

model Forum {
  id        String     @id @unique @default(cuid())
  title     String
  subforums Subforum[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  archived  Boolean    @default(false)
  deleted   Boolean    @default(false)
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subforum {
  id          String   @id @unique @default(cuid())
  title       String
  description String
  threads     Thread[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  archived    Boolean  @default(false)
  deleted     Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum       Forum    @relation(fields: [forumId], references: [id])
  forumId     String
}

model Thread {
  id         String       @id @unique @default(cuid())
  title      String
  content    String
  comments   Comment[]
  status     ThreadStatus @default(PENDING_REVIEW)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  archived   Boolean      @default(false)
  deleted    Boolean      @default(false)
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subforum   Subforum     @relation(fields: [subforumId], references: [id])
  subforumId String
}

model Comment {
  id        String     @id @unique @default(cuid())
  content   String
  reactions Reaction[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  archived  Boolean    @default(false)
  deleted   Boolean    @default(false)
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]  @relation("Comment_Children")
  // When Thread is deleted, delete comments
  parent    Comment?   @relation("Comment_Children", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  thread    Thread     @relation(fields: [threadId], references: [id])
  threadId  String
}

enum ThreadStatus {
  PENDING_REVIEW
  ARCHIVED
  DELETED
  ACTIVE
  LOCKED
}

enum Reaction {
  HAPPY
  SAD
  ANGRY
  CONFUSED
  EXCITED
  LAUGHING
}

enum Role {
  USER
  ADMIN
}
